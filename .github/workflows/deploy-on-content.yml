name: Deploy on content update

on:
  repository_dispatch:
    types: [content-updated]
  workflow_dispatch:
  push:
    branches: [main]

concurrency:
  group: deploy-production
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.WEBSITE_DISPATCH_TOKEN }}

      - name: Update submodule to latest (shallow)
        run: |
          git -c protocol.version=2 submodule update --init --recursive --depth 1
          git -c protocol.version=2 submodule update --remote --recursive --depth 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: Install deps
        run: npm ci

      - name: Cache Next build artifacts
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-${{ hashFiles('package-lock.json') }}-${{ hashFiles('content/**') }}
          restore-keys: |
            next-${{ hashFiles('package-lock.json') }}-

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Enable Firebase Web Frameworks experiment
        run: firebase experiments:enable webframeworks

      - name: Copy content to public (replace symlink)
        run: |
          rm -f public/content
          cp -r content public/content
          # Ensure all static assets are properly accessible
          ls -la public/assets/ || echo "No assets directory found"
          ls -la public/sw.js || echo "No service worker found"

      - name: Debug content structure
        run: |
          echo "=== Content directory structure ==="
          ls -la content/ || echo "No content directory"
          echo "=== Content articles ==="
          find content/articles -name "*.md" | head -10 || echo "No articles found"
          echo "=== Public content ==="
          ls -la public/content/ || echo "No public/content"
          echo "=== Articles with title field ==="
          grep -r "title:" content/articles/ | head -5 || echo "No titles found"

      - name: Build (Contentlayer + Next)
        run: npm run build
        env:
          # Authentication (disabled for development - will be production only)
          NEXT_PUBLIC_DISABLE_AUTH: ${{ secrets.NEXT_PUBLIC_DISABLE_AUTH }}
          
          # Google Analytics
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
          
          # Firebase Client Configuration  
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          
          # Google Analytics Server-side
          GOOGLE_ANALYTICS_PROPERTY_ID: ${{ secrets.GOOGLE_ANALYTICS_PROPERTY_ID }}
          GOOGLE_ANALYTICS_CLIENT_EMAIL: ${{ secrets.GOOGLE_ANALYTICS_CLIENT_EMAIL }}
          GOOGLE_ANALYTICS_PRIVATE_KEY: ${{ secrets.GOOGLE_ANALYTICS_PRIVATE_KEY }}
          GOOGLE_ANALYTICS_PROJECT_ID: ${{ secrets.GOOGLE_ANALYTICS_PROJECT_ID }}
          
          # GitHub Token for workflow
          WEBSITE_DISPATCH_TOKEN: ${{ secrets.WEBSITE_DISPATCH_TOKEN }}

      - name: Clean up before deployment
        run: |
          # Clean Firebase cache
          rm -rf .firebase
          # Clean up build artifacts that might contain symlinks
          rm -rf .next/cache 2>/dev/null || true
          # Remove any symlinks that might exist (but keep content directory)
          find . -type l -not -path "./node_modules/*" -not -path "./content/*" -delete 2>/dev/null || true

      - name: Debug frameworks output
        run: |
          echo "PROJECT=$FIREBASE_PROJECT_ID"
          ls -la .firebase || true
          ls -la .firebase/$FIREBASE_PROJECT_ID || true
          ls -la .firebase/$FIREBASE_PROJECT_ID/functions || true

      - name: Set cleanup policy (once)
        run: firebase functions:artifacts:setpolicy --location europe-west1 --days 7 --project "$FIREBASE_PROJECT_ID"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Deploy Firebase
        run: |
          # Deploy solo hosting per gli update di contenuto (veloce)
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "Content update detected - deploying hosting only"
            firebase deploy --only hosting --project "$FIREBASE_PROJECT_ID" --non-interactive
          else
            echo "Code update detected - deploying full stack"
            firebase deploy --project "$FIREBASE_PROJECT_ID" --non-interactive
          fi
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}